(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
exports.__esModule = true;
__export(require("./World"));
__export(require("./math/Vec2"));
__export(require("./objects/Body"));
},{"./World":2,"./math/Vec2":3,"./objects/Body":4}],2:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var Vec2_1 = require("./math/Vec2");
var World = (function () {
    function World() {
        this.Bodies = new Array();
        this.Gravity = new Vec2_1.Vec2(0, -50);
    }
    World.prototype.AddBody = function (body) {
        this.Bodies.push(body);
    };
    World.prototype.Step = function (dt) {
        for (var _i = 0, _a = this.Bodies; _i < _a.length; _i++) {
            var body = _a[_i];
            body.Integrate(dt);
        }
    };
    return World;
}());
exports.World = World;
},{"./math/Vec2":3}],3:[function(require,module,exports){
"use strict";
exports.__esModule = true;
/// 2D向量
var Vec2 = (function () {
    function Vec2(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = x;
        this.y = y;
    }
    Vec2.prototype.Clone = function () {
        return new Vec2(this.x, this.y);
    };
    Vec2.prototype.SetZero = function () {
        this.x = 0;
        this.y = 0;
        return this;
    };
    Vec2.prototype.Set = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    Vec2.prototype.Copy = function (other) {
        this.x = other.x;
        this.y = other.y;
        return this;
    };
    Vec2.prototype.SelfAdd = function (v) {
        this.x += v.x;
        this.y += v.y;
        return this;
    };
    Vec2.prototype.AddV = function (v) {
        return new Vec2(this.x + v.x, this.y + v.y);
    };
    Vec2.prototype.SelfSub = function (v) {
        this.x -= v.x;
        this.y -= v.y;
        return this;
    };
    Vec2.prototype.SubV = function (v) {
        return new Vec2(this.x - v.x, this.y - v.y);
    };
    Vec2.prototype.SelfMulS = function (s) {
        this.x *= s;
        this.y *= s;
        return this;
    };
    Vec2.prototype.MulS = function (s) {
        return new Vec2(this.x * s, this.y * s);
    };
    Vec2.prototype.Dot = function (v) {
        return this.x * v.x + this.y * v.y;
    };
    Vec2.prototype.CrossV = function (v) {
        return this.x * v.y - this.y * v.x;
    };
    Vec2.prototype.Length = function () {
        var x = this.x, y = this.y;
        return Math.sqrt(x * x + y * y);
    };
    Vec2.prototype.LengthSquared = function () {
        var x = this.x, y = this.y;
        return (x * x + y * y);
    };
    Vec2.prototype.Normalize = function () {
        //const length: number = this.Length();
        //if (length >= 0.001/*Setting.EPSILON*/) {
        var inv_length = 1 / this.Length();
        return new Vec2(this.x * inv_length, this.y * inv_length);
    };
    Vec2.prototype.SelfNormalize = function () {
        var length = this.Length();
        if (length >= 0.001 /*Setting.EPSILON*/) {
            var inv_length = 1 / length;
            this.x *= inv_length;
            this.y *= inv_length;
        }
        return this;
    };
    Vec2.prototype.SelfRotate = function (radians) {
        var c = Math.cos(radians);
        var s = Math.sin(radians);
        var x = this.x;
        this.x = c * x - s * this.y;
        this.y = s * x + c * this.y;
        return this;
    };
    Vec2.prototype.Rotate = function (radians) {
        var v_x = this.x, v_y = this.y;
        var c = Math.cos(radians);
        var s = Math.sin(radians);
        return new Vec2(c * v_x - s * v_y, s * v_x + c * v_y);
    };
    Vec2.prototype.SelfCrossVS = function (s) {
        var x = this.x;
        this.x = s * this.y;
        this.y = -s * x;
        return this;
    };
    Vec2.prototype.SelfCrossSV = function (s) {
        var x = this.x;
        this.x = -s * this.y;
        this.y = s * x;
        return this;
    };
    Vec2.prototype.SelfAbs = function () {
        this.x = Math.abs(this.x);
        this.y = Math.abs(this.y);
        return this;
    };
    Vec2.prototype.SelfNeg = function () {
        this.x = (-this.x);
        this.y = (-this.y);
        return this;
    };
    Vec2.prototype.Neg = function () {
        return new Vec2(-this.x, -this.y);
    };
    return Vec2;
}());
exports.Vec2 = Vec2;
},{}],4:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var Vec2_1 = require("../math/Vec2");
var Body = (function () {
    /**
     * 刚体
     * @class Body
     * @constructor
     */
    function Body(world) {
        this.position = new Vec2_1.Vec2();
        this.velocity = new Vec2_1.Vec2();
        this.Acceleration = new Vec2_1.Vec2();
        this.world = world;
        //this.Acceleration.SelfAdd(world.Gravity);
    }
    Body.prototype.Integrate = function (dt) {
        // 在边界处反弹
        if (this.position.x < -280) {
            this.position.x = -280;
            this.velocity.x = -this.velocity.x;
        }
        else if (this.position.x > 280) {
            this.position.x = 280;
            this.velocity.x = -this.velocity.x;
        }
        if (this.position.y < -180) {
            this.position.y = -180;
            this.velocity.y = -this.velocity.y;
        }
        else if (this.position.y > 180) {
            this.position.y = 180;
            this.velocity.y = -this.velocity.y;
        }
        // 计算当前速度
        // 速度的该变量即加速度与时间的乘积
        // v+=a*t        
        this.velocity.SelfAdd(this.Acceleration.MulS(dt));
        this.position.SelfAdd(this.velocity.MulS(dt));
    };
    return Body;
}());
exports.Body = Body;
},{"../math/Vec2":3}],5:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var DebugDraw = (function () {
    function DebugDraw(ctx) {
        this.ctx = ctx;
    }
    DebugDraw.prototype.DrawCircle = function (x, y, radius) {
        var ctx = this.ctx;
        if (ctx) {
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, Math.PI * 2, false);
            ctx.strokeStyle = "rgb(255,0,0)";
            ctx.stroke();
        }
    };
    DebugDraw.prototype.DrawSolidCircle = function (x, y, radius) {
        var ctx = this.ctx;
        if (ctx) {
            var cx = x;
            var cy = y;
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, Math.PI * 2, true);
            ctx.moveTo(cx, cy);
            ctx.lineTo((cx + radius), cy);
            ctx.fillStyle = "rgba(255,0,0,0.5)";
            ctx.fill();
            ctx.strokeStyle = "rgb(255,0,0)";
            ctx.stroke();
        }
    };
    ;
    return DebugDraw;
}());
exports.DebugDraw = DebugDraw;
},{}],6:[function(require,module,exports){
/// <reference path="../typings/dat-gui/dat-gui.d.ts" />
/// <reference path="../typings/stats/stats.d.ts" />
//// <reference path="../build/StunEngine.d.ts" />
"use strict";
exports.__esModule = true;
var DebugDraw_1 = require("./DebugDraw");
var sp = require("../src/StunPhysics");
var test = (function () {
    function test() {
        this.totalTime = 0; // 用于计算变加速运动的时间
        this.ctx = document.getElementById('canvas').getContext("2d");
        this.btnStart = document.getElementById('btnStart');
        this.btnExample4 = document.getElementById('btnExample4');
        this.pMessage = document.getElementById('messageExample4');
        this.isPause = true;
        this.AccelerationLength = 50;
        this.motionType = 0;
        this.k = 50;
    }
    test.prototype.start = function () {
        var _this = this;
        this.btnStart.onclick = function () {
            _this.isPause = !_this.isPause;
            if (_this.isPause) {
                _this.btnStart.innerHTML = "开始";
                _this.btnExample4.disabled = true;
            }
            else {
                _this.btnStart.innerHTML = "暂停";
                _this.btnExample4.disabled = false;
            }
        };
        this.btnExample4.onclick = function () {
            _this.motionType = 3;
            _this.totalTime = 0;
            _this.circleBody.position.x = 0;
            _this.circleBody.velocity.x = 0;
        };
        // 初始化FPS控件
        this.stats = new Stats();
        this.stats.showPanel(0);
        this.stats.dom.style.position = 'absolute';
        document.getElementById("Stats-output").appendChild(this.stats.dom);
        // 设置UI控件
        var obj = {
            运动类型: 0,
            向心加速度: 100,
            劲度系数: 50
        };
        this.gui = new dat.GUI;
        this.gui.add(obj, '运动类型', { '抛体运动': 0, '圆周运动': 1, '简谐振动': 2 }).onChange(function (e) {
            _this.motionType = e;
            _this.ResetBody();
        });
        this.gui.add(obj, '向心加速度').min(50).max(150).step(10).onChange(function (e) {
            _this.AccelerationLength = e;
        });
        this.gui.add(obj, '劲度系数').min(20).max(200).step(20).onChange(function (e) {
            _this.k = e;
        });
        this.debugDraw = new DebugDraw_1.DebugDraw(this.ctx);
        this.world = new sp.World();
        this.circleBody = new sp.Body(this.world);
        this.ResetBody();
        this.world.AddBody(this.circleBody);
        this.Update();
    };
    ;
    test.prototype.Update = function () {
        var _this = this;
        requestAnimationFrame(function () { return _this.Update(); });
        this.stats.update();
        var time = Date.now();
        this.elapsedTime = this.previousTime ? (time - this.previousTime) / 1000 : 0;
        this.elapsedTime = Math.min(1 / 10, this.elapsedTime);
        this.previousTime = time;
        if (this.elapsedTime > 0) {
            var ctx = this.ctx;
            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
            ctx.save();
            // 0,0 at center of canvas, x right, y up
            ctx.translate(0.5 * ctx.canvas.width, 0.5 * ctx.canvas.height);
            ctx.scale(1, -1);
            var body = this.circleBody;
            if (!this.isPause) {
                //console.log('type=' + this.motionType + ',a=' + this.AccelerationLength + ',k=' + this.k);
                if (this.motionType == 0) {
                    body.Acceleration = this.world.Gravity;
                }
                else if (this.motionType == 1) {
                    body.Acceleration = body.velocity.Normalize().Rotate(Math.PI / 2).MulS(this.AccelerationLength); // 圆周运动
                }
                else if (this.motionType == 2) {
                    body.Acceleration = body.position.Neg().MulS(this.k); // 简谐振动
                }
                else if (this.motionType == 3) {
                    body.Acceleration.x = 5 - 0.9 * body.velocity.x;
                    this.totalTime += this.elapsedTime;
                    if (body.position.x <= 1.167) {
                        this.pMessage.innerText = "时间：" + this.totalTime + "s，位移：" + body.position.x + "m，速度：" + body.velocity.x + "m/s";
                    }
                }
                /*switch (this.motionType) {
                    case 0:
                        body.Acceleration = this.world.Gravity;
                        console.log(this.motionType);
                        break;
                    case 1:
                        body.Acceleration = body.velocity.Normalize().Rotate(Math.PI / 2).MulS(this.AccelerationLength);// 圆周运动
                        console.log(this.motionType);
                        break;
                    case 2:
                        body.Acceleration = body.position.Neg().MulS(this.k);// 简谐振动
                        console.log(this.motionType);
                        break;
                }*/
                this.world.Step(this.elapsedTime);
            }
            this.debugDraw.DrawSolidCircle(body.position.x, body.position.y, 20);
            ctx.restore();
        }
        ;
    };
    ;
    test.prototype.ResetBody = function () {
        this.circleBody.position.SetZero();
        this.circleBody.velocity.Set(100, 0);
    };
    return test;
}());
exports.test = test;
window.onload = function () {
    var main = new test();
    main.start();
};
},{"../src/StunPhysics":1,"./DebugDraw":5}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
